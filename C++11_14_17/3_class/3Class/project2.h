#pragma once
#include "time.h"


namespace class2_
{

    void func(Time t)
    {
    
    }
    int main()
    {
        // 一：构造函数：在类中，有一种特殊的成员函数，它的名字和类名相同，我们在创建类的
        // 对象的时候，这个特殊的成员函数就会被系统自动调用。这个函数就叫构造函数。
        // 因为构造函数会被系统自动调用，所以我们可以简单的理解成：构造函数的目的就是
        // 初始化类对象的数据成员。
        // (1)构造函数没有返回值。这也是构造函数的特殊之处。
        // (2)不可以手工调用构造函数，否则编译就会出错。
        // (3)正常情况下，构造函数应该被声明为public，因为我们创建一个对象时，系统要替
        // 我们调用调用构造函数，这也说明构造函数它是一个public函数，才能够被系统（外界)调用。
        // 因为类缺省的成员都是私有成员，所以我们必须说明构造函数是一个public函数,
        // 否则无法创建该类的对象。
        // (4)构造函数如果有多个参数，我们创建对象的时候也要带上这些参数。

        // 二：多个构造函数：一个类中可以有多个构造函数，就可以为类对象创建提供多种初始化方法。
        // 但是多个构造函数之间总要有点不同的地方，比如参数个数，参数类型上。

        //Time mytime = Time(12, 12, 12);
        //Time mytime2(12, 12, 12);
        //Time mytime3 = Time{ 12, 12, 12 };
        //Time mytime4{ 12,12,21 };
        //Time mytime5 = { 12, 12, 12 };

        //Time mytime = Time();
        //Time mytime2;
        //Time mytime3 = Time{ };
        //Time mytime4{ };
        //Time mytime5 = {};


        //// 如下4个对象并没有调用传统意义上的构造函数，调用的是拷贝构造函数
        //Time t1 = mytime;
        //Time t2(mytime);
        //Time t3{ mytime };
        //Time t4 = { mytime };


        // 三：函数默认参数
        // 规定：
        // (1)默认值只能放在函数的声明中，除非该函数没有函数声明。
        // (2)在具有多个参数的函数中指定默认值时，参数部分必须出现在不默认参数的右边，
        // 一旦某个参数开始指定默认值，右边的所有参数必须指定默认值。

        // 四：隐式转换和explicit
        // 编译系统，在私下干了很多我们不知道和不了解的事情
        //Time t40 = 12; // 编译器肯定有个行为，把数字转换成一个Time对象,调用了单参数的构造函数
        //Time t41 = (12, 13, 14, 15, 16);
        func(16);  // 含糊不清的写法，存在临时对象或者隐式转换。

        Time t100 = { 16 }; // 这个写法咱们认为还算正常，带一个参数，至少让系统明确的知道调用哪个构造函数
        Time t101 = 16;  // 含糊不清的写法，就存在临时对象的隐式转换。
        // 是否可以强制系统，明确要求构造函数不能做隐式类型转换？可以，如果函数声明中带有
        // explicit，则这个构造函数只能用于初始化和现实类型转换。

        // 对于单参数的构造函数，一般都声明为explicit,除非有特别的原因


        // 五：构造函数初始化列表
        // (1)显得专业，高大上
        // (2)效率上更高

        return 0;
    }

}
