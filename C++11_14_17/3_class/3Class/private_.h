#pragma once

#include <iostream>
using namespace std;
#include "men.h"


namespace private_
{

    int main()
    {
        // 派生类概念
        // 类之间有层次关系，有父类(基类，超类)，有子类(派生类)，
        // 有父亲类，有孩子类，构成了层次关系。继承这种概念，是咱们面向对象程序设计的核心思想之一。
        // 这种继承，说白了我们要先定义个父类。父类中定义的一些公用成员函数，成员变量。
        // 我们通过继承父类来构建新的类：子类，所以写代码时，我们只需要写和子类相关的内容即可。
        // 子类一般会比父类更加庞大。

        // class Men : public Human // 表示Men是Human的子类
        // class 子类名：继承方式 父类名
        // 继承方式（访问权限/访问等级）：public/protected/private

        // 二：派生类丢向定义是调用构造函数的顺序
        Men men;

        // 三种访问权限

        // 函数遮蔽,也就是子类有一个同名含漱液，那么父类中，不管有几个同名函数，子类都无法访问了。
        men.public_fun();  // 子类调用父类的函数
        //(1)在子类成员函数，用“父类”：：函数名强制调用父类函数。
        //(2)using：using namespace
        // C++11:让父类同名函数在子类中可见。
        // 通过using这个关键字，让父类的同名函数在子类中可见，说白了就是"让父类同名函数以在子类中以重载的方式来使用"
        // 说明：
        // (a)using Human::func()：只能指定函数名，则凡是基类中，protected中的func在子类中都可见了。你无法让一部分的同名函数可见
        // (b)using引入的目的是用来实现在子类中调用父类的重载版本。该函数在父类中的参数跟子类中的参数，个数/类型,不同。

    }
}