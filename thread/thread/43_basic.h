//////////////////////////////////////////////////////////////////////////
//  @file     43_basic.h
//  @author   Morris
//  @date     2019-03-27
//  @mail     tappanmorris@outlook.com
//
//  @version  2019-0327
//  -added 
//  @remark   
//  @note
//////////////////////////////////////////////////////////////////////////

#ifndef BASIC_H
#define BASIC_H

namespace basic
{
    int main()
    {
        // 一：并发、进程、线程的基本概念
        // 并发、线程、进程必须掌握；
        // (1.1)并发
        // 两个或者更多任务(独立的任务)同时发生：一个程序同时执行多个独立的任务
        // 以往的计算机，单核cpu某个时刻只能执行一个任务：由操作系统调度，每秒钟精心多次的所谓"任务切换"
        // 并发的假象(不是真正的并发),这种切换(上下文切换)是要有时间开销的，比如操作
        // 系统要保存你切换时的各种状态，执行进度等信息，都需要时间，一会切换回来的时候要复原这些信息

        // 硬件的发展，出现了多处理器的计算机：用于服务器和高性能计算领域
        // 能够实现真正的并行执行多个任务(硬件并发)
        // 使用并发的原因：主要是同时可以干更多的事情，提高性能

        // (1.2)可执行程序
        // 磁盘上的一个文件，windows下，一个扩展名为.exe。linux，ls -la rwxrwxrwx(x执行权限)

        // (1.3)进程：大家都知道了可执行程序是能够运行的。
        // windows下，双击一个可执行程序来运行。linu下 ./文件名 ./a;
        // 进程，就是一个可执行程序运行起来了，就叫创建了一个进程
        // 进程，就是运行了的可执行程序；

        // (1.4)线程
        // a)每个进程(执行起来的可执行程序),都有一个住线程，这个主线程是唯一的，也就是一个进程中只能有一个主线程。
        // b)当你执行了可执行程序，产生了一个进程后，这个主线程就随着这个进程默默的启动起来了。
        // 主线程与主进程唇齿相依
        // 线程：执行代码的，理解成一条代码的执行通路

        // 除了主线程之外，我们可以通过自己写代码来创建其他线程，其他线程走的是别的通路
        // 每创建一个新线程，我就可以在同一时刻，多干一个不同的事情
        // 多线程(并发)
        // 线程并不是越多越好，每个线程都需要一个独立的堆栈空间(1M)，线程切换要保存很多中间状态；
        // 切换会耗费本该属于程序运行的时间

        // 总结线程：
        // a)线程是用来指向代码的
        // b)把线程这个东西理解成一条代码的执行通路，一个新线程代表一条新的道路
        // c)一个进程自动包含一个主线程，主线程随着进程默默的启动并运行，我们可以通过编码创建其他线程(非主线程)
        // 但是创建的数量最大都不建议超过200-300个，大家可以在实际的项目中可以不断调整和优化
        // d)因为主线程是自动启动的，所以一个进程中最少也是有一个线程
        // e)说白了：多线程可以同时干多个事，所以效率高，但是到底有多高，并不是一个很容易评估和量化的东西
        // 大家仍旧需要在实际编程，实际项目中进行体会和调整优化；

        // (1.5)学习心得
        // 开发多线程程序：实力的体现，一个是商用的必须需求
        // 线程开发有一定的难度，实现代码更复杂。理解上更难一些，需要一定的学习时间
        // C++线程会涉及很多新概念，对于C++道路上的成长特别关键，不要急于求成；
        // 想拿高薪，网络通讯，网路服务器，网络方向。。。多线程绝对绕不开必须得学

        // 二：并发的实现方法
        // a)我们通过多个进程并发实现。
        // b)在单独的进程中，创建多个线程实现并发；自己写代码创建除主线程之外的其他线程

        // (2.1)多进程并发
        // word启动后就是进程，ie浏览器启动后就是进程。
        // 账号服务器，游戏逻辑服务器，服务器之间的通信
        // 进程间的通信(同一个电脑上：管道，文件，消息队列，共享内存)；
        // (不同电脑上：socket通信技术)

        // (2.2)多线程并发：单个进程中创建了多个线程
        // 线程：感觉轻量级的进程。每个线程都有自己独立的运行路径，但是一个进程中的所有线程共享地址空间(共享内存)
        // 全局变量，指针，引用都可以在线程之间传递，所以多线程的开销小于多进程。
        // 共享内存带来了新的问题，数据一致性问题

        // 多线程和多进程并发虽然可以混合使用，但老师建议，优先考虑多线程技术

        // (2.3)总结
        // 和进程比，线程有如下有点：
        // a)线程启动速度更快，更轻量级；
        // b)系统资源开销更少，执行速度更快，比如共享内存这种通信方式比任何其他的通信方式都快；
        // 缺点：
        // 使用起来有一定的难度，要小心处理数据的一致性问题。


        return 0;
    }

}



#endif
